<?php

namespace app\modules\panel\controllers;

use app\models\Fields;
use app\models\Messege;
use app\models\TelegramBot;
use app\models\Templates;
use Codeception\Util\Template;
use Yii;
use yii\data\ActiveDataProvider;
use yii\web\Controller;
use yii\web\NotFoundHttpException;
use yii\filters\VerbFilter;

/**
 * TemplatesController implements the CRUD actions for Templates model.
 */
class TemplatesController extends MainController
{
  /**
   * @inheritDoc
   */
  public $arrayEm = [
    "üòÄ" => "#128512;",
    "üòÉ" => "#128515;",
    "üòÑ" => "#128516;",
    "üòÅ" => "#128513;",
    "üòÜ" => "#128518;",
    "üòÖ" => "#128517;",
    "ü§£" => "#129315;",
    "üòÇ" => "#128514;",
    "üôÇ" => "#128578;",
    "üôÉ" => "#128579;",
    "üòâ" => "#128521;",
    "üòä" => "#128522;",
    "üòá" => "#128519;",
    "üòç" => "#128525;",
    "üòó" => "#128535;",
    "üòö" => "#128538;",
    "üòô" => "#128537;",
    "üòã" => "#128523;",
    "üòõ" => "#128539;",
    "üòú" => "#128540;",
    "ü§™" => "#129322;",
    "üòù" => "#128541;",
    "ü§ó" => "#129303;",
    "ü§≠" => "#129325;",
    "ü§´" => "#129323;",
    "ü§î" => "#129300;",
    "ü§ê" => "#129296;",
    "ü§®" => "#129320;",
    "üòê" => "#128528;",
    "üòë" => "#128529;",
    "üò∂" => "#128566;",
    "üòè" => "#128527;",
    "üòí" => "#128530;",
    "üôÑ" => "#128580;",
    "üò¨" => "#128556;",
    "ü§•" => "#129317;",
    "üòå" => "#128524;",
    "üòî" => "#128532;",
    "üò™" => "#128554;",
    "ü§§" => "#129316;",
    "üò¥" => "#128564;",
    "üò∑" => "#128567;",
    "ü§ï" => "#129301;",
    "ü§Æ" => "#129326;",
    "ü§ß" => "#129319;",
    "ü•µ" => "#129397;",
    "ü•∂" => "#129398;",
    "ü§Ø" => "#129327;",
    "ü§†" => "#129312;",
    "ü•≥" => "#129395;",
    "üòé" => "#128526;",
    "ü§ì" => "#129299;",
    "üßê" => "#129488;",
    "üòï" => "#128533;",
    "üòü" => "#128543;",
    "üò≤" => "#128562;",
    "üò≥" => "#128563;",
    "ü•∫" => "#129402;",
    "üò¶" => "#128550;",
    "üò¢" => "#128546;",
    "üò≠" => "#128557;",
    "üò±" => "#128561;",
    "üòñ" => "#128534;",
    "üòì" => "#128531;",
    "üò°" => "#128545;",
    "üò†" => "#128544;",
    "ü§¨" => "#129324;",
    "üëø" => "#128127;",
    "üíÄ" => "#128128;",
    "üí©" => "#128169;",
    "ü§°" => "#129313;",
    "üëπ" => "#128121;",
    "üòπ" => "#128569;",
    "üß°" => "#129505;",
    "üíØ" => "#128175;",
    "üí¢" => "#128162;",
    "üí•" => "#128165;",
    "üí´" => "#128171;",
    "üí¶" => "#128166;",
    "üí®" => "#128168;",
    "üï≥" => "#128371;",
    "üí£" => "#128163;",
    "üí¨" => "#128172;",
    "üó®" => "#128488;",
    "üóØ" => "#128495;",
    "üí§" => "#128164;",
    "üëã" => "#128075;",
    "ü§ö" => "#129306;",
    "‚úã" => "#9995;",
    "üññ" => "#128406;",
    "üëå" => "#128076;",
    "üëà" => "#128072;",
    "üëâ" => "#128073;",
    "üëÜ" => "#128070;",
    "üëá" => "#128071;",
    "üëç" => "#128077;",
    "üëé" => "#128078;",
    "üëè" => "#128079;",
    "üôå" => "#128588;",
    "ü§ù" => "#129309;",
    "üôè" => "#128591;",
    "üí™" => "#128170;",
    "üëÄ" => "#128064;",
    "üëÅ" => "#128065;",
    "ü¶à" => "#129416;",
    "üïú" => "#128358;",
    "‚õà" => "#9928;",
    "üå§" => "#127780;",
    "üå•" => "#127781;",
    "üåß" => "#127783;",
    "üå©" => "#127785;",
    "üåÄ" => "#127744;",
    "üî•" => "#128293;",
    "üíß" => "#128167;",
    "üéÄ" => "#127872;",
    "üéÅ" => "#127873;",
    "üéü" => "#127903;",
    "üëì" => "#128083;",
    "ü•Ω" => "#129405;",
    "ü•º" => "#129404;",
    "üîá" => "#128263;",
    "üîî" => "#128276;",
    "üé§" => "#127908;",
    "üìª" => "#128251;",
    "üì±" => "#128241;",
    "üìû" => "#128222;",
    "üîã" => "#128267;",
    "üíø" => "#128191;",
    "üßÆ" => "#129518;",
    "üîç" => "#128269;",
    "üî¶" => "#128294;",
    "üìî" => "#128212;",
    "üìñ" => "#128214;",
    "üìÑ" => "#128196;",
    "üóû" => "#128478;",
    "üìë" => "#128209;",
    "üí∞" => "#128176;",
    "üíµ" => "#128181;",
    "üõí" => "#128722;",
    "üîÄ" => "#128256;",
    "‚è´" => "#9195;",
    "üîΩ" => "#128317;",
    "‚è¨" => "#9196;",
    "‚è∫" => "#9210;",
    "üîÜ" => "#128262;",
    "üì∂" => "#128246;",
    "‚úÖ" => "#9989;",
    "‚ùå" => "#10060;",
    "‚ùé" => "#10062;",
    "‚ùì" => "#10067;",
    "‚ùî" => "#10068;",
    "‚ùï" => "#10069;",
    "‚ùó" => "#10071;",
    "üÜó" => "#127383;",
    "üÖø" => "#127359;",
    "üÜò" => "#127384;",
    "üîª" => "#128315;",
    "üîò" => "#128280;",
  ];

  public function behaviors()
  {
    return array_merge(
      parent::behaviors(),
      [
        'verbs' => [
          'class' => VerbFilter::className(),
          'actions' => [
            'delete' => ['POST'],
          ],
        ],
      ]
    );
  }

  /**
   * Lists all Templates models.
   *
   * @return string
   */
  public function actionIndex()
  {
    $dataProvider = new ActiveDataProvider([
      'query' => Templates::find(),
      /*
            'pagination' => [
                'pageSize' => 50
            ],
            'sort' => [
                'defaultOrder' => [
                    'id' => SORT_DESC,
                ]
            ],
            */
    ]);

    return $this->render('index', [
      'dataProvider' => $dataProvider,
    ]);
  }

  /**
   * Displays a single Templates model.
   * @param int $id ID
   * @return string
   * @throws NotFoundHttpException if the model cannot be found
   */
  public function actionView($id)
  {
    $messege = Messege::find()->asArray()->all();
    return $this->render('view', [
      'model' => $this->findModel($id),
      'messege' => $messege
    ]);
  }

  /**
   * Creates a new Templates model.
   * If creation is successful, the browser will be redirected to the 'view' page.
   * @return string|\yii\web\Response
   */
  public function actionCreate()
  {
    $model = new Templates();

    if ($this->request->isPost) {

      $data = $this->request->post();
      if ($model->load($data)) {
        $model->template = json_encode($data['Templates']['template']);

        if (!empty($data['Parametr'])) {
          $set = implode(';', $data['Parametr']);
        } else {
          $model->param = '';
        }
        if (!empty($set)) {
          $model->param = $set;
        }
      }

      if ($model->save()) {
        $messege = "<span class=\"badge bg-success\">–®–∞–±–ª–æ–Ω –¥–æ–±–∞–≤–ª–µ–Ω</span>";
        Yii::$app->session->setFlash('flash', $messege);
        return $this->redirect(['view', 'id' => $model->id]);
      }
    } else {
      $model->loadDefaultValues();
    }


    return $this->render('create', [
      'arrayEm' => $this->arrayEm,
      'model' => $model,
      'tg' => TelegramBot::find()->where(['active' => '1'])->all(),
      'field' => Fields::find()->asArray()->all()
    ]);
  }

  /**
   * Updates an existing Templates model.
   * If update is successful, the browser will be redirected to the 'view' page.
   * @param int $id ID
   * @return string|\yii\web\Response
   * @throws NotFoundHttpException if the model cannot be found
   */
  public function actionUpdate($id)
  {
    $arrty = '';
    $model = $this->findModel($id);
    if ($this->request->isPost) {
      $data = $this->request->post();
      if ($model->load($data)) {
        $model->template = json_encode($data['Templates']['template']);
        
        if (!empty($data['Parametr'])) {
          $set = json_encode($data['Parametr']);
        } else {
          $model->param = '';
        }
        if (!empty($set)) {
          $model->param = $set;
        }
      }
      if ($model->save()) {
        $messege = "<span class=\"badge bg-warning\">–®–∞–±–ª–æ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω</span>";
        Yii::$app->session->setFlash('flash', $messege);
        return $this->redirect(['view', 'id' => $model->id]);
      }else{
        var_dump($model->getErrors());
      }
    }
    if (!empty($model->param)) {
      $setr = json_decode($model->param, true);
    } else {
      $setr = false;
    }
    $add = array();
    if($setr){

    
    foreach($setr as $key => $val){
      $add[] = implode(' –∏ ',$val);
    }
    $ert = implode(') –∏–ª–∏ (',$add);
    $arrty = '( '.$ert.' )';
  }
    if(!empty($model->param)){
      $param = json_decode($model->param ,true);
    }else{
      $param = false;
    }
    return $this->render('update', [
      'model' => $model,
      'arrayEm' => $this->arrayEm,
      'tg' => TelegramBot::find()->where(['active' => '1'])->all(),
      'field' => Fields::find()->asArray()->all(),
      'setr' => $arrty,
      'param' => $param
    ]);
  }

  /**
   * Deletes an existing Templates model.
   * If deletion is successful, the browser will be redirected to the 'index' page.
   * @param int $id ID
   * @return \yii\web\Response
   * @throws NotFoundHttpException if the model cannot be found
   */
  public function actionDelete($id)
  {
    $this->findModel($id)->delete();
    $messege = "<span class=\"badge bg-danger\">–®–∞–±–ª–æ–Ω —É–¥–∞–ª–µ–Ω</span>";
    Yii::$app->session->setFlash('flash', $messege);
    return $this->redirect(['index']);
  }

  public function actionAddParam()
  {

    if (Yii::$app->request->isAjax) {

      $data = Yii::$app->request->post();
      $count = (int) $data['count'] + rand(0,999);
      $is = (int) $data['is'];
      

      Yii::$app->response->format = \yii\web\Response::FORMAT_JSON;
      return [
        'form' => $this->renderPartial('add-param', ['count' => $count, 'is' => $is]),
        'data' => $count
      ];
    }
  }

  public function actionOrParam()
  {
    if(Yii::$app->request->isAjax){
      $data = Yii::$app->request->post();
      $dataSet = $data['count'] + rand(0,999);
      $clod = $data['count'];
      Yii::$app->response->format = \yii\web\Response::FORMAT_JSON;
      return [
        'form' => $this->renderPartial('or-param', ['data' => $dataSet, 'clod' => $clod]),
        'data' => $data
      ];
      
    }
  }

  public function actionCopy($id)
  {
    if (Templates::find()->where(['id' => $id])->exists()) {
      $template = Templates::find()->where(['id' => $id])->one();
      $model = new Templates([
        'name' => $template->name . " (–ö–æ–ø–∏—è)",
        'template' => $template->template,
        'bot_id' =>  null,
        'statys' => '0',
        'param' => $template->param
      ]);
      if ($model->save()) {
        return $this->redirect(['update', 'id' => $model->id]);
      } else {
        var_dump($model->getErrors());
      }
    }
  }
  protected function findModel($id)
  {
    if (($model = Templates::findOne(['id' => $id])) !== null) {
      return $model;
    }

    throw new NotFoundHttpException('The requested page does not exist.');
  }
}
